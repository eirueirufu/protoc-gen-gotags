// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: msg.proto

package testdata

import (
	_ "github.com/eirueirufu/protoc-gen-gotags/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Msg1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoTagOption                 string `protobuf:"bytes,1,opt,name=no_tag_option,json=noTagOption,proto3" json:"no_tag_option,omitempty"`
	AppendTag                   string `protobuf:"bytes,2,opt,name=append_tag,json=appendTag,proto3" json:"append_tag,omitempty" append_key:"msg1_append_value"`
	ReplaceTag                  string `protobuf:"bytes,3,opt,name=replace_tag,json=replaceTag,proto3" json:"msg1_replace_json_value"`
	AppendTags                  string `protobuf:"bytes,4,opt,name=append_tags,json=appendTags,proto3" json:"append_tags,omitempty" append_key1:"msg1_append_value1" append_key2:"msg1_append_value2"`
	ReplaceTags                 string `protobuf:"msg1_replace_proto_value" json:"msg1_replace_json_value"`
	ReplaceAndAppendTags        string `protobuf:"bytes,6,opt,name=replace_and_append_tags,json=replaceAndAppendTags,proto3" json:"msg1_replace_json_value" append_key:"msg1_append_value"`
	All                         string `msg1_all`
	AllWithReplaceAndAppendTags string `msg1_all`
}

func (x *Msg1) Reset() {
	*x = Msg1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg1) ProtoMessage() {}

func (x *Msg1) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg1.ProtoReflect.Descriptor instead.
func (*Msg1) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

func (x *Msg1) GetNoTagOption() string {
	if x != nil {
		return x.NoTagOption
	}
	return ""
}

func (x *Msg1) GetAppendTag() string {
	if x != nil {
		return x.AppendTag
	}
	return ""
}

func (x *Msg1) GetReplaceTag() string {
	if x != nil {
		return x.ReplaceTag
	}
	return ""
}

func (x *Msg1) GetAppendTags() string {
	if x != nil {
		return x.AppendTags
	}
	return ""
}

func (x *Msg1) GetReplaceTags() string {
	if x != nil {
		return x.ReplaceTags
	}
	return ""
}

func (x *Msg1) GetReplaceAndAppendTags() string {
	if x != nil {
		return x.ReplaceAndAppendTags
	}
	return ""
}

func (x *Msg1) GetAll() string {
	if x != nil {
		return x.All
	}
	return ""
}

func (x *Msg1) GetAllWithReplaceAndAppendTags() string {
	if x != nil {
		return x.AllWithReplaceAndAppendTags
	}
	return ""
}

type Msg2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoTagOption                 string `protobuf:"bytes,1,opt,name=no_tag_option,json=noTagOption,proto3" json:"no_tag_option,omitempty"`
	AppendTag                   string `protobuf:"bytes,2,opt,name=append_tag,json=appendTag,proto3" json:"append_tag,omitempty" append_key:"msg2_append_value"`
	ReplaceTag                  string `protobuf:"bytes,3,opt,name=replace_tag,json=replaceTag,proto3" json:"msg2_replace_json_value"`
	AppendTags                  string `protobuf:"bytes,4,opt,name=append_tags,json=appendTags,proto3" json:"append_tags,omitempty" append_key1:"msg2_append_value1" append_key2:"msg2_append_value2"`
	ReplaceTags                 string `protobuf:"msg2_replace_proto_value" json:"msg2_replace_json_value"`
	ReplaceAndAppendTags        string `protobuf:"bytes,6,opt,name=replace_and_append_tags,json=replaceAndAppendTags,proto3" json:"msg2_replace_json_value" append_key:"msg2_append_value"`
	All                         string `msg2_all`
	AllWithReplaceAndAppendTags string `msg2_all`
}

func (x *Msg2) Reset() {
	*x = Msg2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg2) ProtoMessage() {}

func (x *Msg2) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg2.ProtoReflect.Descriptor instead.
func (*Msg2) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

func (x *Msg2) GetNoTagOption() string {
	if x != nil {
		return x.NoTagOption
	}
	return ""
}

func (x *Msg2) GetAppendTag() string {
	if x != nil {
		return x.AppendTag
	}
	return ""
}

func (x *Msg2) GetReplaceTag() string {
	if x != nil {
		return x.ReplaceTag
	}
	return ""
}

func (x *Msg2) GetAppendTags() string {
	if x != nil {
		return x.AppendTags
	}
	return ""
}

func (x *Msg2) GetReplaceTags() string {
	if x != nil {
		return x.ReplaceTags
	}
	return ""
}

func (x *Msg2) GetReplaceAndAppendTags() string {
	if x != nil {
		return x.ReplaceAndAppendTags
	}
	return ""
}

func (x *Msg2) GetAll() string {
	if x != nil {
		return x.All
	}
	return ""
}

func (x *Msg2) GetAllWithReplaceAndAppendTags() string {
	if x != nil {
		return x.AllWithReplaceAndAppendTags
	}
	return ""
}

var File_msg_proto protoreflect.FileDescriptor

var file_msg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x05, 0x0a, 0x04, 0x4d, 0x73, 0x67, 0x31, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x6f, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xca, 0x3e, 0x1f, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x11, 0x6d, 0x73, 0x67, 0x31, 0x5f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x54, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xca, 0x3e, 0x1f, 0x0a, 0x04,
	0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x6d, 0x73, 0x67, 0x31, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x69, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48,
	0xca, 0x3e, 0x21, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x31,
	0x12, 0x12, 0x6d, 0x73, 0x67, 0x31, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0xca, 0x3e, 0x21, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x32, 0x12, 0x12, 0x6d, 0x73, 0x67, 0x31, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x6c, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xca, 0x3e, 0x24, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x12, 0x18, 0x6d, 0x73, 0x67, 0x31, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0xca, 0x3e, 0x1f, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x6d, 0x73,
	0x67, 0x31, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x7b, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x44, 0xca, 0x3e, 0x1f, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x17,
	0x6d, 0x73, 0x67, 0x31, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xca, 0x3e, 0x1f, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x11, 0x6d, 0x73, 0x67, 0x31, 0x5f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xc2, 0x3e,
	0x08, 0x6d, 0x73, 0x67, 0x31, 0x5f, 0x61, 0x6c, 0x6c, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x96,
	0x01, 0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xc2, 0x3e, 0x08, 0x6d, 0x73,
	0x67, 0x31, 0x5f, 0x61, 0x6c, 0x6c, 0xca, 0x3e, 0x1f, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x17, 0x6d, 0x73, 0x67, 0x31, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xca, 0x3e, 0x1f, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x11, 0x6d, 0x73, 0x67, 0x31, 0x5f, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x61, 0x6c, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x73, 0x22, 0xc0, 0x05, 0x0a, 0x04, 0x4d, 0x73, 0x67, 0x32,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x54, 0x61, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xca, 0x3e, 0x1f, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x11, 0x6d, 0x73, 0x67, 0x32, 0x5f,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xca, 0x3e,
	0x1f, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x6d, 0x73, 0x67, 0x32, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x69, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x48, 0xca, 0x3e, 0x21, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x31, 0x12, 0x12, 0x6d, 0x73, 0x67, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0xca, 0x3e, 0x21, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x32, 0x12, 0x12, 0x6d, 0x73, 0x67, 0x32, 0x5f, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x6c, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xca,
	0x3e, 0x24, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x12, 0x18, 0x6d, 0x73,
	0x67, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xca, 0x3e, 0x1f, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x17, 0x6d, 0x73, 0x67, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x7b, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xca, 0x3e, 0x1f, 0x0a, 0x04, 0x6a, 0x73, 0x6f,
	0x6e, 0x12, 0x17, 0x6d, 0x73, 0x67, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xca, 0x3e, 0x1f, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x11, 0x6d, 0x73, 0x67, 0x32, 0x5f,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xc2, 0x3e, 0x08, 0x6d, 0x73, 0x67, 0x32, 0x5f, 0x61, 0x6c, 0x6c, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x12, 0x96, 0x01, 0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xc2, 0x3e,
	0x08, 0x6d, 0x73, 0x67, 0x32, 0x5f, 0x61, 0x6c, 0x6c, 0xca, 0x3e, 0x1f, 0x0a, 0x04, 0x6a, 0x73,
	0x6f, 0x6e, 0x12, 0x17, 0x6d, 0x73, 0x67, 0x32, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xca, 0x3e, 0x1f, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x11, 0x6d, 0x73, 0x67, 0x32,
	0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x61,
	0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x73, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x69, 0x72, 0x75, 0x65, 0x69, 0x72,
	0x75, 0x66, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67,
	0x6f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x3b,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_proto_rawDescOnce sync.Once
	file_msg_proto_rawDescData = file_msg_proto_rawDesc
)

func file_msg_proto_rawDescGZIP() []byte {
	file_msg_proto_rawDescOnce.Do(func() {
		file_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_proto_rawDescData)
	})
	return file_msg_proto_rawDescData
}

var file_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_msg_proto_goTypes = []interface{}{
	(*Msg1)(nil), // 0: testdata.Msg1
	(*Msg2)(nil), // 1: testdata.Msg2
}
var file_msg_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_msg_proto_init() }
func file_msg_proto_init() {
	if File_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msg_proto_goTypes,
		DependencyIndexes: file_msg_proto_depIdxs,
		MessageInfos:      file_msg_proto_msgTypes,
	}.Build()
	File_msg_proto = out.File
	file_msg_proto_rawDesc = nil
	file_msg_proto_goTypes = nil
	file_msg_proto_depIdxs = nil
}
